name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio flake8
    
    - name: Create test database
      run: |
        mkdir -p narajangter_app/src/database
        touch narajangter_app/src/database/app.db
        # Initialize database with required tables
        python -c "
import sys
sys.path.insert(0, 'narajangter_app/src')
from models.narajangter import Base
from models.user import User
from sqlalchemy import create_engine
engine = create_engine('sqlite:///narajangter_app/src/database/app.db')
Base.metadata.create_all(engine)
print('Database initialized successfully')
" || echo "Database initialization skipped"
        python add_indexes.py || echo "Index creation skipped"
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,__pycache__
    
    - name: Run unit tests
      env:
        NARAJANGTER_API_KEY: ${{ secrets.NARAJANGTER_API_KEY }}
      run: |
        python -m pytest tests/unit/ -v --cov=narajangter_app/src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    continue-on-error: true  # Security scan failures shouldn't block the pipeline
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'  # Only scan for critical and high vulnerabilities
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()  # Always upload results even if scan fails
      continue-on-error: true

  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deployment step - configure based on your infrastructure"
        # Add deployment commands here
        # Example: ssh deploy@server 'cd /app && git pull && systemctl restart flask-app'