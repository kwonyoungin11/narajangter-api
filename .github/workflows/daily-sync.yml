name: Daily Data Sync

on:
  schedule:
    # 매일 한국시간 새벽 2시 (UTC 17:00)
    - cron: '0 17 * * *'
  workflow_dispatch:  # 수동 실행 가능

jobs:
  sync-data:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup database
      run: |
        mkdir -p narajangter_app/src/database
        python add_indexes.py
    
    - name: Sync bid notices
      env:
        NARAJANGTER_API_KEY: ${{ secrets.NARAJANGTER_API_KEY }}
      run: |
        python -c "
        import os
        import sys
        import json
        from datetime import datetime, timedelta
        sys.path.insert(0, 'narajangter_app/src')
        
        # Set up environment
        os.environ['SERVICE_KEY'] = os.environ.get('NARAJANGTER_API_KEY', '')
        
        from utils.batch_processor import BatchProcessor
        from models.narajangter import db
        
        # Calculate date range (last 7 days)
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        # Initialize processor
        processor = BatchProcessor(db, os.environ['SERVICE_KEY'])
        
        # Sync data
        print(f'Syncing data from {start_date.strftime(\"%Y%m%d\")} to {end_date.strftime(\"%Y%m%d\")}')
        result = processor.sync_bid_notices_optimized(
            start_date.strftime('%Y%m%d'),
            end_date.strftime('%Y%m%d')
        )
        print(f'Sync completed: {result}')
        "
    
    - name: Generate sync report
      run: |
        echo "Data sync completed at $(date)" >> sync_log.txt
    
    - name: Upload sync log
      uses: actions/upload-artifact@v3
      with:
        name: sync-log
        path: sync_log.txt
        retention-days: 30